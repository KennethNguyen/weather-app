{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","toFixed","humidity","description","error","API_KEY","process","App","state","undefined","zip","e","a","preventDefault","target","elements","cityOrZip","value","fetch","api_call","json","data","console","log","setState","main","temp","sys","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRASeA,EAPA,kBACX,6BACI,wBAAIC,UAAU,0BAAd,eACA,uBAAGA,UAAU,6BAAb,mDCKOC,EARF,SAAAC,GAAK,OACd,0BAAMC,SAAUD,EAAME,YAClB,2BAAOC,KAAK,OAAOC,KAAK,YAAYC,YAAY,wBAChD,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,iDCwBOC,EA5BC,SAAAN,GAAK,OACjB,yBAAKF,UAAU,iBAEPE,EAAMO,MAAQP,EAAMQ,SAAW,uBAAGV,UAAU,gBAAb,YAC3B,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMO,KAAzC,KAAiDP,EAAMQ,UAI3DR,EAAMS,aAAe,uBAAGX,UAAU,gBAAb,eACjB,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMS,YAAzC,aAAiF,EAApBT,EAAMS,YAAgB,EAAI,IAAIC,QAAQ,GAAnG,WAIJV,EAAMW,UAAY,uBAAGb,UAAU,gBAAb,YACd,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMW,SAAzC,MAIJX,EAAMY,aAAe,uBAAGd,UAAU,gBAAb,eACjB,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMY,cAI7CZ,EAAMa,OAAS,uBAAGf,UAAU,kBAAkBE,EAAMa,SClB1DC,G,MAAO,UAAMC,qCAwEJC,E,2MArEbC,MAAQ,CACNR,iBAAaS,EACbX,UAAMW,EACNC,SAAKD,EACLV,aAASU,EACTP,cAAUO,EACVN,iBAAaM,EACbL,WAAOK,G,EAGThB,W,sCAAa,WAAOkB,GAAP,uBAAAC,EAAA,4DACXD,EAAEE,iBACIf,EAAOa,EAAEG,OAAOC,SAASC,UAAUC,MACnCP,EAAMC,EAAEG,OAAOC,SAASC,UAAUC,MAClClB,EAAUY,EAAEG,OAAOC,SAAShB,QAAQkB,MAJ/B,SAKYC,MAAM,qDAAD,OAAsDpB,EAAtD,YAA8DC,EAA9D,gBAA6EW,EAA7E,YAAoFX,EAApF,kBAAqGM,EAArG,kBALjB,cAKLc,EALK,gBAMQA,EAASC,OANjB,OAMLC,EANK,OAONvB,GAAQC,GAAaW,GAAOX,GAC/BuB,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZxB,YAAaqB,EAAKI,KAAKC,KACvB5B,KAAMuB,EAAK1B,KACXI,QAASsB,EAAKM,IAAI5B,QAClBG,SAAUmB,EAAKI,KAAKvB,SACpBC,YAAakB,EAAKO,QAAQ,GAAGzB,YAC7BC,MAAO,MAGT,EAAKoB,SAAS,CACZxB,iBAAaS,EACbX,UAAMW,EACNV,aAASU,EACTP,cAAUO,EACVN,iBAAaM,EACbL,MAAO,2BAxBA,0C,8HA8BX,OACE,6BACE,yBAAKf,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,2BACb,kBAAC,EAAD,CAAMI,WAAYoC,KAAKpC,aACvB,kBAAC,EAAD,CACEO,YAAa6B,KAAKrB,MAAMR,YACxBF,KAAM+B,KAAKrB,MAAMV,KACjBC,QAAS8B,KAAKrB,MAAMT,QACpBG,SAAU2B,KAAKrB,MAAMN,SACrBC,YAAa0B,KAAKrB,MAAML,YACxBC,MAAOyB,KAAKrB,MAAMJ,kB,GA1DpB0B,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8a275715.chunk.js","sourcesContent":["import React from 'react'\n\nconst Titles = () => (\n    <div>\n        <h1 className=\"title-container__title\">Weather App</h1>\n        <p className=\"title-container__subtitle\">Find out temperature, conditions, and more...</p>\n    </div>\n)\n\nexport default Titles","import React from 'react'\n\nconst Form = props => (\n    <form onSubmit={props.getWeather}>\n        <input type=\"text\" name=\"cityOrZip\" placeholder=\"city or zip code...\" />\n        <input type=\"text\" name=\"country\" placeholder=\"country...\"/>\n        <button>Get weather</button>\n    </form>\n)\n\nexport default Form","import React from 'react'\n\nconst Weather = props => (\n    <div className=\"weather__info\">\n        {\n            props.city && props.country && <p className=\"weather__key\">Location:\n                <span className=\"weather__value\"> {props.city}, {props.country}</span>\n            </p>\n        }\n        {\n            props.temperature && <p className=\"weather__key\">Temperature: \n                <span className=\"weather__value\"> {props.temperature} °C | {(props.temperature * 9/5 + 32).toFixed(2)} °F</span>\n            </p>\n        }\n        {\n            props.humidity && <p className=\"weather__key\">Humidity: \n                <span className=\"weather__value\"> {props.humidity}%</span>\n            </p>\n        }\n        {\n            props.description && <p className=\"weather__key\">Description:\n                <span className=\"weather__value\"> {props.description}</span>\n            </p>\n        }\n        {\n            props.error && <p className=\"weather__error\">{props.error}</p>\n        }\n    </div>\n)\n\nexport default Weather","import React from 'react'\nimport Titles from './components/Titles'\nimport Form from './components/Form'\nimport Weather from './components/Weather'\nimport './App.css'\n\n\nconst API_KEY = `${process.env.REACT_APP_WEATHER_API_KEY}`\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    zip: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault()\n    const city = e.target.elements.cityOrZip.value\n    const zip = e.target.elements.cityOrZip.value\n    const country = e.target.elements.country.value\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&zip=${zip},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json()\n    if ((city && country) || (zip && country)) {\n      console.log(data)\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      })      \n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the value\"\n      })     \n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather}/>\n                  <Weather \n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />  \n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}